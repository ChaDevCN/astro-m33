---
import type { GetStaticPaths } from "astro";

import Products from "@/views/Products/index.astro";
import ProductsClass from "@/views/ProductsClass/index.astro";
import ProductsDetail from "@/views/ProductsDetail/index.astro";
import News from "@/views/News/index.astro";
import NewsClass from "@/views/NewsClass/index.astro";
import NewsDetail from "@/views/NewsDetail/index.astro";
import Knowledge from "@/views/Knowledge/index.astro";
import KnowledgeClass from "@/views/KnowledgeClass/index.astro";
import KnowledgeDetail from "@/views/KnowledgeDetail/index.astro";

import Layout from "@/layouts/PageLayout.astro";

import { fetchData } from "@/lib/fetchDataAll";

import { flattenTree, findNodeByAttribute } from "@/utils/utils";
import { isPagination, isDetail, pageSize } from "@/common/router";

export const getStaticPaths = (async () => {
  const {
    result: {
      data: { menu },
    },
  } = await fetchData();

  const treeMenu = flattenTree(menu).filter((item) =>
    isDetail.includes(item.type)
  );

  const staticPath: any[] = [];
  /** 详情*/
  treeMenu.forEach((item) => {
    const params = {
      params: {
        type: item.path.split("/")[1] as string,
        page: item.path.split("/")[2] as string,
      },
      props: {
        default: {
          type: item.type,
          detail: item,
        },
      },
    };
    staticPath.push(params);
  });
  const noDetail: any = [];
  /** 分页 */
  isPagination.forEach(async (type) => {
    const treeMenu = flattenTree(menu);

    if (!type.includes("class")) {
      const nextTreeMenu = treeMenu.filter((s) => s.type === `${type}detail`);
      const total = nextTreeMenu.length;
      const size = Math.ceil(total / pageSize);
      const active = findNodeByAttribute(treeMenu, "type", type);
      for (let i = 1; i <= size; i++) {
        const params = {
          params: {
            type: active.type,
            page: `page-${i}`,
          },
          props: {
            default: {
              type: type,
              detail: active,
            },
          },
        };
        noDetail.push(params);
      }
    } else {
      const treeMenuClass = treeMenu.filter((item) =>
        item.type.endsWith("class")
      );
      treeMenuClass.forEach((typeClass) => {
        const nextTreeMenu = treeMenu.filter(
          (s) =>
            s.type === `${type.replace("class", "")}detail` &&
            s.glid === typeClass.ID
        );
        const total = nextTreeMenu.length;
        const size = Math.ceil(total / pageSize);
        for (let i = 1; i <= size; i++) {
          const params = {
            params: {
              type: typeClass.path.replace("/", ""),
              page: `page-${i}`,
            },
            props: {
              default: {
                type: typeClass.type,
                detail: typeClass,
              },
            },
          };
          noDetail.push(params);
        }
      });
    }
  });
  return [...staticPath, ...noDetail];
}) satisfies GetStaticPaths;

const {
  props: {
    default: { type, detail },
  },
} = Astro;

const paramsAll = [...isDetail, ...isPagination];
const componentMap = {
  newsdetail: NewsDetail,
  productsdetail: ProductsDetail,
  knowledgedetail: KnowledgeDetail,
  productsclass: ProductsClass,
  products: Products,
  news: News,
  newsclass: NewsClass,
  knowledge: Knowledge,
  knowledgeclass: KnowledgeClass,
};
const Comp = componentMap[type];
const { title, description, keywords } = detail;
---

<Layout metadata={{ title, description, keywords }}>
  {
    paramsAll.includes(type) ? (
      <Comp activeItem={detail} />
    ) : (
      <p>Type not supported.</p>
    )
  }
</Layout>
